import numpy

def exact_internal_energy(T, h : float = 0.02, J : int = 1, N : int = 50):
    beta = 1 / T
    tmp = -(N*((numpy.exp(2*J*beta)*numpy.cosh(beta*h)**2 - 2*numpy.sinh(2*J*beta))**0.5 + numpy.exp(J*beta)*numpy.cosh(beta*h))**N*(J*numpy.exp(J*beta)*numpy.cosh(beta*h) + h*numpy.exp(J*beta)*numpy.sinh(beta*h) + (numpy.exp(2*J*beta)*numpy.cosh(beta*h)**2 - 2*numpy.sinh(2*J*beta))**(-0.5)*(1.0*J*numpy.exp(2*J*beta)*numpy.cosh(beta*h)**2 - 2.0*J*numpy.cosh(2*J*beta) + 1.0*h*numpy.exp(2*J*beta)*numpy.sinh(beta*h)*numpy.cosh(beta*h)))/((numpy.exp(2*J*beta)*numpy.cosh(beta*h)**2 - 2*numpy.sinh(2*J*beta))**0.5 + numpy.exp(J*beta)*numpy.cosh(beta*h)) + N*(-(numpy.exp(2*J*beta)*numpy.cosh(beta*h)**2 - 2*numpy.sinh(2*J*beta))**0.5 + numpy.exp(J*beta)*numpy.cosh(beta*h))**N*(J*numpy.exp(J*beta)*numpy.cosh(beta*h) + h*numpy.exp(J*beta)*numpy.sinh(beta*h) - (numpy.exp(2*J*beta)*numpy.cosh(beta*h)**2 - 2*numpy.sinh(2*J*beta))**(-0.5)*(1.0*J*numpy.exp(2*J*beta)*numpy.cosh(beta*h)**2 - 2.0*J*numpy.cosh(2*J*beta) + 1.0*h*numpy.exp(2*J*beta)*numpy.sinh(beta*h)*numpy.cosh(beta*h)))/(-(numpy.exp(2*J*beta)*numpy.cosh(beta*h)**2 - 2*numpy.sinh(2*J*beta))**0.5 + numpy.exp(J*beta)*numpy.cosh(beta*h)))/(N*((-(numpy.exp(2*J*beta)*numpy.cosh(beta*h)**2 - 2*numpy.sinh(2*J*beta))**0.5 + numpy.exp(J*beta)*numpy.cosh(beta*h))**N + ((numpy.exp(2*J*beta)*numpy.cosh(beta*h)**2 - 2*numpy.sinh(2*J*beta))**0.5 + numpy.exp(J*beta)*numpy.cosh(beta*h))**N))
    return tmp
